/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AddProductToCartDto,
    AddProductToCartDtoFromJSON,
    AddProductToCartDtoToJSON,
    CartDto,
    CartDtoFromJSON,
    CartDtoToJSON,
} from '../models';

export interface AddProductToCartRequest {
    addProductToCartDto: AddProductToCartDto;
}

/**
 * 
 */
export class CheckoutApi extends runtime.BaseAPI {

    /**
     * Add product to cart
     * Add product to cart
     */
    async addProductToCartRaw(requestParameters: AddProductToCartRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CartDto>> {
        if (requestParameters.addProductToCartDto === null || requestParameters.addProductToCartDto === undefined) {
            throw new runtime.RequiredError('addProductToCartDto','Required parameter requestParameters.addProductToCartDto was null or undefined when calling addProductToCart.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/checkout/addProductToCart`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddProductToCartDtoToJSON(requestParameters.addProductToCartDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CartDtoFromJSON(jsonValue));
    }

    /**
     * Add product to cart
     * Add product to cart
     */
    async addProductToCart(requestParameters: AddProductToCartRequest, initOverrides?: RequestInit): Promise<CartDto> {
        const response = await this.addProductToCartRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create cart
     * Create cart
     */
    async createCartRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<CartDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/checkout/createCart`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CartDtoFromJSON(jsonValue));
    }

    /**
     * Create cart
     * Create cart
     */
    async createCart(initOverrides?: RequestInit): Promise<CartDto> {
        const response = await this.createCartRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get cart
     * Get cart
     */
    async getCartRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<CartDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/checkout/getCart`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CartDtoFromJSON(jsonValue));
    }

    /**
     * Get cart
     * Get cart
     */
    async getCart(initOverrides?: RequestInit): Promise<CartDto> {
        const response = await this.getCartRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get user orders
     * Get user orders
     */
    async getUserOrdersRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/checkout/getUserOrders`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get user orders
     * Get user orders
     */
    async getUserOrders(initOverrides?: RequestInit): Promise<object> {
        const response = await this.getUserOrdersRaw(initOverrides);
        return await response.value();
    }

}
