/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateProductDto,
    CreateProductDtoFromJSON,
    CreateProductDtoToJSON,
    EditProductDto,
    EditProductDtoFromJSON,
    EditProductDtoToJSON,
    ProductDto,
    ProductDtoFromJSON,
    ProductDtoToJSON,
} from '../models';

export interface CreateRequest {
    createProductDto: CreateProductDto;
}

export interface EditRequest {
    id: string;
    editProductDto: EditProductDto;
}

export interface GetByIdRequest {
    id: string;
}

export interface RemoveRequest {
    id: string;
}

/**
 * 
 */
export class ProductsApi extends runtime.BaseAPI {

    /**
     * Create product
     * Create product
     */
    async createRaw(requestParameters: CreateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ProductDto>> {
        if (requestParameters.createProductDto === null || requestParameters.createProductDto === undefined) {
            throw new runtime.RequiredError('createProductDto','Required parameter requestParameters.createProductDto was null or undefined when calling create.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/product/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateProductDtoToJSON(requestParameters.createProductDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductDtoFromJSON(jsonValue));
    }

    /**
     * Create product
     * Create product
     */
    async create(requestParameters: CreateRequest, initOverrides?: RequestInit): Promise<ProductDto> {
        const response = await this.createRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Edit product
     * Edit product
     */
    async editRaw(requestParameters: EditRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ProductDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling edit.');
        }

        if (requestParameters.editProductDto === null || requestParameters.editProductDto === undefined) {
            throw new runtime.RequiredError('editProductDto','Required parameter requestParameters.editProductDto was null or undefined when calling edit.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/product/edit/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EditProductDtoToJSON(requestParameters.editProductDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductDtoFromJSON(jsonValue));
    }

    /**
     * Edit product
     * Edit product
     */
    async edit(requestParameters: EditRequest, initOverrides?: RequestInit): Promise<ProductDto> {
        const response = await this.editRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all products
     * Get all products
     */
    async getRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/product/getAll`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get all products
     * Get all products
     */
    async get(initOverrides?: RequestInit): Promise<object> {
        const response = await this.getRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get product by id
     * Get product by id
     */
    async getByIdRaw(requestParameters: GetByIdRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ProductDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/product/getById/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductDtoFromJSON(jsonValue));
    }

    /**
     * Get product by id
     * Get product by id
     */
    async getById(requestParameters: GetByIdRequest, initOverrides?: RequestInit): Promise<ProductDto> {
        const response = await this.getByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete product
     * Delete product
     */
    async removeRaw(requestParameters: RemoveRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling remove.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/product/remove/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete product
     * Delete product
     */
    async remove(requestParameters: RemoveRequest, initOverrides?: RequestInit): Promise<void> {
        await this.removeRaw(requestParameters, initOverrides);
    }

}
